"use strict";$(function(){function e(){G?M.pause():M.play(),M.onplaying=function(){G=!0},M.onpause=function(){G=!1}}function t(){n(),l(),g(),i()}function o(e){if($(e.target).hasClass("easyButton")){alert("Easy Mode Selected"),N++,x.text(N),O=1;for(var o=0;o<5;o++)y.append('<div class="square"></div>');t()}else if($(e.target).hasClass("hardButton")){alert("Hard Mode Selected"),N++,x.text(N),O=5;for(var n=0;n<9;n++)y.append('<div class="square"></div>');t()}}function n(){q.hide(),w.hide(),C.show(),I.show()}function r(){return colorPalette[Math.floor(Math.random()*colorPalette.length)]}function a(){var e=elementSelector[O-1];return P=e.map(function(e){return E[e]})}function l(){H=[],console.log("In play round",O),E=r(),a(),console.log("roundArray",P),P.shuffle(),console.log("shuffledArray",H),$(".square").each(function(e,t){$(t).css("backgroundColor",H[e])})}function u(e){var t=e.replace(/\s/g,"").match(/^rgba?\((\d+),(\d+),(\d+)/i);return t&&4===t.length?"#"+("0"+parseInt(t[1],10).toString(16)).slice(-2)+("0"+parseInt(t[2],10).toString(16)).slice(-2)+("0"+parseInt(t[3],10).toString(16)).slice(-2):e}function s(){var e=[];$(".square").each(function(t,o){var n=$(o).css("backgroundColor");e.push(n)}),console.log("userRgb",e);var t=e.map(u);console.log("userSortedArray",t),console.log("roundArray",P),t.length===P.length&&t.every(function(e,t){return e===P[t]})?(console.log("It's a match, well done"),A.play(),console.log("roundCounter before alerts",N),N>4?(alert("Game complete"),d()):(alert("Round complete, press Next Round to continue."),S.show())):console.log("Not quite, have another go")}function i(e){var t=$(e.target).index(".square"),o=$(".square").length;0!==t&&t!==o-1&&(0===Y?(J=$(this),U=J.css("backgroundColor")):1===Y&&(J.css("backgroundColor",$(this).css("backgroundColor")),$(this).css("backgroundColor",U),Y=-1,s()),Y+=1)}function c(){N++,O++,y.append('<div class="square"></div>'),S.hide()}function f(){c(),x.text(N),l()}function h(){N=0,O=null,C.hide(),S.hide(),$(".square").remove(),I.hide(),q.show(),w.show();var e=[];console.log(e)}function d(){p(),v(),alert("Game Complete! You finished with a time of "+T),m(),h()}function g(){D=new Date}function p(){R=new Date}function v(){T=(R-D)/1e3}function m(){return T<j?alert("Congratulations, you've set the new quickest time!"):alert("Unfortunately, you weren't quite fast enought to set a new quick time."),j=T<j?T:j,localStorage.setItem("quickestTime",j),j}console.log("Igor, JavaScript' alive!");var y=$(".gameBoard"),k=$(".difficulty"),q=$(".easyButton"),w=$(".hardButton"),C=$(".resetButton"),S=$(".nextButton"),b=$(".quickTime"),I=$(".roundDisplay"),x=$(".round"),B=$(".soundOnOff"),A=$("audio")[0],M=$("audio")[1],D=null,R=null,T=null,G=!1,N=0,O=null,P=null,E=null,H=[],J=void 0,U=null,Y=0,j=localStorage.getItem("quickestTime")||45;b.text(j),B.on("click",e),y.on("click",".square",i),S.on("click",f),C.on("click",h),k.on("click",o),Array.prototype.shuffle=function(){for(var e=1;e<this.length-1;e++)H.push(this[e]);if(H.sort(function(){return.5-Math.random()}),H.push(this[this.length-1]),H.unshift(this[0]),H.length!==P.length||!H.every(function(e,t){return e===P[t]}))return H;H=[],P.shuffle()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
